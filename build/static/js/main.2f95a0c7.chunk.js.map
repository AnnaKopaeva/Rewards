{"version":3,"sources":["store/users/reducers.ts","store/rewards/reducers.ts","store/rootReducer.ts","helpers/callAPI.ts","config.ts","store/users/saga.ts","store/users/selectors.ts","mockedData/rewards.ts","store/rewards/saga.ts","store/rootSaga.ts","store/index.tsx","components/Avatar/index.tsx","hooks/useToggleModal.ts","components/TabComponent/TabButtons.tsx","components/TabComponent/Tabs.tsx","components/TabComponent/Tab.tsx","store/rewards/selectors.ts","components/Avatar/user.svg","components/PanelEmpty/index.tsx","containers/ListRewards/index.tsx","containers/Feed/index.tsx","containers/Header/index.tsx","hooks/clickAwayListener.ts","components/Modal/index.tsx","components/Input/index.tsx","components/Autocomplete/index.tsx","containers/RewardModal/validation.ts","containers/RewardModal/index.tsx","components/Preloader/index.tsx","App.tsx","index.tsx"],"names":["userSlice","createSlice","name","initialState","profile","data","loading","error","reducers","getUsers","state","setUsers","action","payload","getUsersFailed","actions","rewardsSlice","all","my","myTotal","giveTotal","getRewards","setRewards","getRewardsFailed","createRewards","updateRewards","updateMyRewards","reducer","combineReducers","users","usersReducer","rewards","rewardsReducer","callAPI","a","url","method","Axios","result","baseApiUrl","fetchDataSaga","call","config","put","getUsersSelector","getUserProfileSelector","createSelector","getUsersDataSelector","id","user","userBy","reward","time","message","getRewardsSaga","createRewardsSaga","select","myRewards","filter","el","Date","now","toLocaleString","rootSaga","takeLatest","type","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","getDefaultMiddleware","thunk","run","saga","SIZE","useToggleModal","React","open","setOpen","handleOpenModal","handleCloseModal","TabButtons","tabsList","changeTab","activeTab","map","tab","className","clsx","tab_button__active","onClick","Tabs","content","children","useState","props","label","setActiveTab","Children","child","push","Tab","getRewardsSelector","getTotalSum","reduce","total","getAllRewardsSelector","getMyRewardsSelector","getRewardsLoadingSelector","getMyRewardsTotalSelector","getGiveRewardsTotalSelector","giveRewards","defaultProps","size","sm","Avatar","src","User","alt","PanelEmpty","title","ListRewards","length","s","Feed","allRewards","useSelector","Header","clickAwayListener","ref","callback","useEffect","handleClickAway","event","current","contains","target","document","addEventListener","removeEventListener","Modal","isOpen","onClose","modalRef","useRef","createPortal","body","Input","inputValue","setInputValue","autoComplete","value","onChange","placeholder","onFocus","Autocomplete","listRef","filteredData","setFilteredData","isShowSuggestions","toggleIsShowSuggestions","_value","filteredSuggestions","item","toLowerCase","includes","elem","index","onSelectSuggestion","MAX_ERROR_MESSAGE","RewardSchema","Yup","shape","required","nullable","max","initialReward","RewardModal","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","setFieldValue","handleChange","handleSubmit","component","rows","Preloader","App","isLoading","render","getElementById"],"mappings":"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","file":"static/js/main.2f95a0c7.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { UserEntity } from \"../../interfaces/UserEntity\";\nimport { ErrorEntity } from \"../../interfaces/ErrorEntity\";\n\nexport interface UsersStore {\n  profile: UserEntity;\n  data: UserEntity[];\n  loading: boolean;\n  error: ErrorEntity;\n}\n\nconst initialState: UsersStore = {\n  profile: null,\n  data: [],\n  loading: false,\n  error: null,\n};\n\nconst userSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    getUsers: (state: UsersStore) => {\n      state.loading = true;\n    },\n    setUsers: (state: UsersStore, action: { payload: UserEntity[] }) => {\n      state.data = action.payload;\n      [state.profile] = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    getUsersFailed: (state: UsersStore, action: { payload: ErrorEntity }) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const { getUsers, setUsers, getUsersFailed } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { ErrorEntity } from \"../../interfaces/ErrorEntity\";\nimport { CreateRewardEntity, RewardEntity } from \"../../interfaces/RewardEntity\";\n\ninterface SetRewardsAction {\n  all: RewardEntity[];\n  my: RewardEntity[];\n}\n\nexport interface RewardsStore {\n  all: RewardEntity[];\n  my: RewardEntity[];\n  myTotal: number;\n  giveTotal: number;\n  loading: boolean;\n  error: ErrorEntity;\n}\n\nconst initialState: RewardsStore = {\n  all: [],\n  my: [],\n  myTotal: 0,\n  giveTotal: 0,\n  loading: true,\n  error: null,\n};\n\nconst rewardsSlice = createSlice({\n  name: \"rewards\",\n  initialState,\n  reducers: {\n    getRewards: (state: RewardsStore) => {\n      state.loading = true;\n    },\n    setRewards: (state: RewardsStore, action: { payload: SetRewardsAction }) => {\n      state.all = action.payload.all;\n      state.my = action.payload.my;\n      state.loading = false;\n    },\n    getRewardsFailed: (state: RewardsStore, action: { payload: ErrorEntity }) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createRewards: (state: RewardsStore, action: { payload: CreateRewardEntity }) => {\n      state.loading = true;\n    },\n    updateRewards: (state: RewardsStore, action: { payload: RewardEntity }) => {\n      state.all = [...state.all, action.payload];\n      state.loading = false;\n    },\n    updateMyRewards: (state: RewardsStore, action: { payload: RewardEntity }) => {\n      state.my = [...state.my, action.payload];\n      state.loading = false;\n    },\n  },\n});\n\nexport const {\n  getRewards,\n  setRewards,\n  getRewardsFailed,\n  createRewards,\n  updateRewards,\n  updateMyRewards,\n} = rewardsSlice.actions;\n\nexport default rewardsSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport usersReducer, { UsersStore } from \"./users/reducers\";\nimport rewardsReducer, { RewardsStore } from \"./rewards/reducers\";\n\nexport interface AppState {\n  users: UsersStore;\n  rewards: RewardsStore;\n}\n\nconst reducer = combineReducers<AppState>({\n  users: usersReducer,\n  rewards: rewardsReducer,\n});\n\nexport default reducer;\n","import Axios, { Method } from \"axios\";\nimport { ErrorEntity } from \"../interfaces/ErrorEntity\";\n\ninterface ApiProps<T = any> {\n  url?: string;\n  method?: Method;\n  data?: T;\n}\n\n/**\n * call to api\n * @async\n * @method\n * @param {String} url - API url\n * @param {Method} method - API methods\n * @param {any} data - data\n * @returns result of call to API\n * @throws { ErrorEntity } When API return error.\n */\nconst callAPI = async ({ url, method, data }: ApiProps) => {\n  const result = await Axios({\n    url,\n    method,\n    data,\n  });\n  return result;\n};\n\nexport default callAPI;\n","const dev = {\n  baseApiUrl: \"https://jsonplaceholder.typicode.com/users\",\n};\n\nexport default {\n  ...dev,\n};\n","import { call, put } from \"redux-saga/effects\";\nimport { AxiosResponse } from \"axios\";\n\nimport callAPI from \"../../helpers/callAPI\";\nimport config from \"../../config\";\n\nimport { setUsers, getUsersFailed } from \"./reducers\";\nimport { getRewards } from \"../rewards/reducers\";\n\nexport function* fetchDataSaga() {\n  try {\n    const result: AxiosResponse = yield call(() => callAPI({ url: config.baseApiUrl }));\n    yield put(setUsers(result.data));\n    yield put(getRewards());\n  } catch (e) {\n    yield put(getUsersFailed(e));\n  }\n}\n","import { createSelector } from \"reselect\";\n\nimport { AppState } from \"../rootReducer\";\n\nexport const getUsersSelector = (state: AppState) => state.users;\n\nexport const getUserProfileSelector = createSelector(getUsersSelector, (users) => users.profile);\nexport const getUsersDataSelector = createSelector(getUsersSelector, (users) => users.data);\nexport const getUsersLoadingSelector = createSelector(getUsersSelector, (users) => users.loading);\nexport const getUsersErrorSelector = createSelector(getUsersSelector, (users) => users.error);\n","import { RewardEntity } from \"../interfaces/RewardEntity\";\n\nconst rewards: RewardEntity[] = [\n  {\n    id: 1,\n    user: {\n      id: 1,\n      name: \"Leanne Graham\",\n    },\n    userBy: {\n      id: 2,\n      name: \"Ervin Howell\",\n    },\n    reward: 100,\n    time: \"4 hrs ago\",\n    message: \"Big thanks for your help in helping on the outage today!!!\",\n  },\n  {\n    id: 2,\n    user: {\n      id: 3,\n      name: \"Clementine Bauch\",\n    },\n    userBy: {\n      id: 4,\n      name: \"Patricia Lebsack\",\n    },\n    reward: 150,\n    time: \"Feb 1, 2021\",\n    message:\n      \"Thanks for your help in creating the product overview deck. Your help to show cases those scenarios really helped in closing the loop on the story.\",\n  },\n];\n\nexport default rewards;\n","import { put, select } from \"redux-saga/effects\";\n\nimport { getUserProfileSelector } from \"../users/selectors\";\nimport rewards from \"../../mockedData/rewards\";\nimport { UserEntity } from \"../../interfaces/UserEntity\";\n\nimport {\n  setRewards,\n  getRewardsFailed,\n  createRewards,\n  updateRewards,\n  updateMyRewards,\n} from \"./reducers\";\n\nexport function* getRewardsSaga() {\n  try {\n    const profile: UserEntity = yield select(getUserProfileSelector);\n    const myRewards = rewards.filter((el) => el.user.id === profile.id);\n\n    yield put(setRewards({ all: rewards, my: myRewards }));\n  } catch (e) {\n    yield put(getRewardsFailed(e));\n  }\n}\n\nexport function* createRewardsSaga(action: ReturnType<typeof createRewards>) {\n  try {\n    const data = action.payload;\n    const profile: UserEntity = yield select(getUserProfileSelector);\n\n    const id = Date.now();\n    const time = new Date().toLocaleString();\n    const result = { ...data, reward: +data.reward, id, time, userBy: profile };\n\n    yield put(updateRewards(result));\n\n    if (data.user.id === profile.id) {\n      // when rewards create for current user, update my rewards\n      yield put(updateMyRewards(result));\n    }\n  } catch (e) {\n    yield put(getRewardsFailed(e));\n  }\n}\n","import { takeLatest } from \"redux-saga/effects\";\n\nimport { fetchDataSaga } from \"./users/saga\";\nimport { getRewardsSaga, createRewardsSaga } from \"./rewards/saga\";\n\nimport { getUsers } from \"./users/reducers\";\nimport { getRewards, createRewards } from \"./rewards/reducers\";\n\nexport default function* rootSaga() {\n  yield takeLatest(getUsers.type, fetchDataSaga);\n  yield takeLatest(getRewards.type, getRewardsSaga);\n  yield takeLatest(createRewards.type, createRewardsSaga);\n}\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducer from \"./rootReducer\";\nimport saga from \"./rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer,\n  middleware: [...getDefaultMiddleware({ thunk: false }), sagaMiddleware],\n});\nsagaMiddleware.run(saga);\n\nexport default store;\n","import * as React from \"react\";\n\nimport \"./Avatar.scss\";\nimport clsx from \"clsx\";\n\nimport User from \"./user.svg\";\n\nexport enum SIZE {\n  s = \"s\",\n  sm = \"sm\",\n}\n\ninterface AvatarProps {\n  size?: SIZE;\n}\n\nconst defaultProps = {\n  size: SIZE.sm,\n};\n\nconst Avatar: React.FC<AvatarProps> = ({ size }) => (\n  <div className={clsx(\"avatar\", `avatar__${size}`)}>\n    <img src={User} alt=\"avatar\" />\n  </div>\n);\n\nAvatar.defaultProps = defaultProps;\n\nexport default Avatar;\n","import * as React from \"react\";\n\nconst useToggleModal = () => {\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpenModal = () => setOpen(true);\n  const handleCloseModal = () => setOpen(false);\n\n  return { open, handleOpenModal, handleCloseModal };\n};\n\nexport default useToggleModal;\n","import React from \"react\";\n\nimport \"./Tabs.scss\";\nimport clsx from \"clsx\";\n\ninterface TabButtonsProps {\n  tabsList: string[];\n  activeTab: string;\n  changeTab(tab: string): void;\n}\n\nconst TabButtons: React.FC<TabButtonsProps> = ({ tabsList, changeTab, activeTab }) => (\n  <>\n    {tabsList.map((tab: string) => (\n      <button\n        key={tab}\n        type=\"button\"\n        className={clsx(\"tab_button\", { tab_button__active: tab === activeTab })}\n        onClick={() => changeTab(tab)}\n      >\n        {tab}\n      </button>\n    ))}\n  </>\n);\n\nexport default TabButtons;\n","import React from \"react\";\n\nimport TabButtons from \"./TabButtons\";\n\nimport \"./Tabs.scss\";\n\ninterface TabsProps {\n  children: React.ReactElement[];\n}\n\nconst Tabs: React.FC<TabsProps> = ({ children }) => {\n  const [activeTab, setActiveTab] = React.useState(children[0]?.props.label);\n\n  const changeTab = (tab: string) => {\n    setActiveTab(tab);\n  };\n\n  let content;\n  const tabsList: string[] = [];\n\n  return (\n    <div>\n      {React.Children.map(children, (child: React.ReactElement) => {\n        tabsList.push(child.props.label);\n        if (child.props.label === activeTab) {\n          content = child.props.children;\n        }\n      })}\n\n      <TabButtons activeTab={activeTab} tabsList={tabsList} changeTab={changeTab} />\n      <div className=\"tab_content\">{content}</div>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React from \"react\";\n\ninterface TabProps {\n  label: string;\n}\n\nconst Tab: React.FC<TabProps> = ({ label, children }) => <>{children}</>;\n\nexport default Tab;\n","import { createSelector } from \"reselect\";\n\nimport { getUserProfileSelector } from \"../users/selectors\";\nimport { AppState } from \"../rootReducer\";\nimport { UserEntity } from \"../../interfaces/UserEntity\";\nimport { RewardEntity } from \"../../interfaces/RewardEntity\";\nimport { RewardsStore } from \"./reducers\";\n\nexport const getRewardsSelector = (state: AppState) => state.rewards;\n\nconst getTotalSum = (data: RewardEntity[]) =>\n  data.reduce((total: number, el) => total + +el.reward, 0);\n\nexport const getAllRewardsSelector = createSelector(getRewardsSelector, (rewards) => rewards.all);\nexport const getMyRewardsSelector = createSelector(getRewardsSelector, (rewards) => rewards.my);\nexport const getRewardsLoadingSelector = createSelector(\n  getRewardsSelector,\n  (rewards) => rewards.loading\n);\nexport const getMyRewardsTotalSelector = createSelector(getRewardsSelector, (rewards) =>\n  getTotalSum(rewards.my)\n);\nexport const getGiveRewardsTotalSelector = createSelector(\n  getRewardsSelector,\n  getUserProfileSelector,\n  (rewards: RewardsStore, profile: UserEntity) => {\n    const giveRewards = rewards.all.filter((el: RewardEntity) => el.userBy.id === profile.id);\n    return getTotalSum(giveRewards);\n  }\n);\n","export default __webpack_public_path__ + \"static/media/user.137d9643.svg\";","import React from \"react\";\n\nimport \"./PanelEmpty.scss\";\n\ninterface PanelEmptyProps {\n  title?: string;\n}\n\nconst defaultProps = {\n  title: \"No data found\",\n  children: \"\",\n};\n\nconst PanelEmpty: React.FC<PanelEmptyProps> = ({ title, children }) => (\n  <div className=\"panel\">\n    <h5 className=\"panel__title\">{title}</h5>\n    <p className=\"panel__desc\">{children}</p>\n  </div>\n);\n\nPanelEmpty.defaultProps = defaultProps;\n\nexport default PanelEmpty;\n","import React from \"react\";\n\nimport Avatar, { SIZE } from \"../../components/Avatar\";\nimport PanelEmpty from \"../../components/PanelEmpty\";\nimport { RewardEntity } from \"../../interfaces/RewardEntity\";\n\nimport \"./ListReward.scss\";\n\ninterface ListRewardsProps {\n  data: RewardEntity[];\n  onClick(): void;\n}\n\nconst ListRewards: React.FC<ListRewardsProps> = ({ data, onClick }) => (\n  <div className=\"list\">\n    <button type=\"button\" className=\"list_add\" onClick={onClick}>\n      +\n    </button>\n    {data.length ? (\n      <div className=\"list__scrollable\">\n        {data.map((reward) => (\n          <div className=\"list_elem\" key={reward.id}>\n            <Avatar size={SIZE.s} />\n            <div className=\"list_elem__details\">\n              <div className=\"list_elem__info\">\n                <span className=\"list_elem__name\">\n                  {reward.user?.name} rewarded by {reward.userBy?.name}\n                </span>\n                <span className=\"list_elem__time\">{reward.time}</span>\n              </div>\n              <p className=\"list_elem__description\">{reward.message}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    ) : (\n      <PanelEmpty>You can add new reward.</PanelEmpty>\n    )}\n  </div>\n);\n\nexport default ListRewards;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport Tabs from \"../../components/TabComponent/Tabs\";\nimport Tab from \"../../components/TabComponent/Tab\";\n\nimport { getAllRewardsSelector, getMyRewardsSelector } from \"../../store/rewards/selectors\";\n\nimport ListRewards from \"../ListRewards\";\n\ninterface FeedProps {\n  handleOpenModal(): void;\n}\n\nconst Feed: React.FC<FeedProps> = ({ handleOpenModal }) => {\n  const allRewards = useSelector(getAllRewardsSelector);\n  const myRewards = useSelector(getMyRewardsSelector);\n\n  return (\n    <Tabs>\n      <Tab label=\"Feed\">\n        <ListRewards data={allRewards} onClick={handleOpenModal} />\n      </Tab>\n      <Tab label=\"My Rewards\">\n        <ListRewards data={myRewards} onClick={handleOpenModal} />\n      </Tab>\n    </Tabs>\n  );\n};\n\nexport default Feed;\n","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport Avatar from \"../../components/Avatar\";\nimport { getUserProfileSelector } from \"../../store/users/selectors\";\nimport {\n  getMyRewardsTotalSelector,\n  getGiveRewardsTotalSelector,\n} from \"../../store/rewards/selectors\";\n\nimport \"./Header.scss\";\n\nconst Header = () => {\n  const profile = useSelector(getUserProfileSelector);\n  const myRewards = useSelector(getMyRewardsTotalSelector);\n  const giveRewards = useSelector(getGiveRewardsTotalSelector);\n\n  return (\n    <div className=\"header\">\n      <div className=\"header_profile\">\n        <Avatar />\n        <span>{profile?.name}</span>\n      </div>\n      <>\n        <div className=\"header_element\">\n          My Rewards\n          <div className=\"header_element__value\">{myRewards}$</div>\n        </div>\n        <div className=\"header_element\">\n          Give\n          <div className=\"header_element__value\">{giveRewards}$</div>\n        </div>\n      </>\n    </div>\n  );\n};\n\nexport default Header;\n","import { useEffect, RefObject } from \"react\";\n\nconst clickAwayListener = (ref: RefObject<any>, callback: () => void) => {\n  useEffect(() => {\n    const handleClickAway = (event: Event) => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        callback();\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickAway);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickAway);\n    };\n  }, [ref]);\n};\n\nexport default clickAwayListener;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport clickAwayListener from \"../../hooks/clickAwayListener\";\n\nimport \"./Modal.scss\";\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose(): void;\n}\n\nconst Modal: React.FC<ModalProps> = ({ children, isOpen, onClose }) => {\n  if (!isOpen) return null;\n\n  const modalRef = React.useRef(null);\n\n  clickAwayListener(modalRef, () => onClose());\n\n  return createPortal(\n    <div className=\"modal\" ref={modalRef}>\n      <button type=\"button\" onClick={onClose} className=\"modal__close_btn\">\n        +\n      </button>\n      {children}\n    </div>,\n    document.body\n  );\n};\n\nexport default Modal;\n","import * as React from \"react\";\n\nimport \"./Input.scss\";\n\ninterface InputProps {\n  type?: string;\n  name?: string;\n  value?: string;\n  placeholder?: string;\n  onChange?(event: React.ChangeEvent<HTMLInputElement>): void;\n  onFocus?(): void;\n}\n\nconst defaultProps = {\n  type: \"text\",\n  name: \"\",\n  value: \"\",\n  placeholder: \"\",\n  onChange: () => {\n    // do nothing\n  },\n  onFocus: () => {\n    // do nothing\n  },\n};\n\nconst Input: React.FC<InputProps> = (props) => {\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  return (\n    <input\n      autoComplete=\"off\"\n      value={inputValue}\n      className=\"input\"\n      {...props}\n      onChange={(event) => {\n        if (props.onChange) {\n          props.onChange(event);\n        } else {\n          onChange(event);\n        }\n      }}\n    />\n  );\n};\n\nInput.defaultProps = defaultProps;\n\nexport default Input;\n","import * as React from \"react\";\nimport clsx from \"clsx\";\n\nimport Input from \"../Input\";\nimport clickAwayListener from \"../../hooks/clickAwayListener\";\n\nimport \"./Autocomplete.scss\";\n\ninterface AutocompleteProps<T> {\n  data: T[];\n  name: string;\n  value: T;\n  onChange(value: T): void;\n}\n\nfunction Autocomplete<T extends { id: number; name: string }>(\n  props: AutocompleteProps<T>\n): JSX.Element {\n  const listRef = React.useRef(null);\n\n  const { data, value, name, onChange } = props;\n\n  const [inputValue, setInputValue] = React.useState(value?.name);\n  const [filteredData, setFilteredData] = React.useState(data);\n\n  const [isShowSuggestions, toggleIsShowSuggestions] = React.useState(false);\n\n  clickAwayListener(listRef, () => toggleIsShowSuggestions(false));\n\n  const onFocus = () => {\n    toggleIsShowSuggestions(true);\n  };\n\n  const onChangeHandle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: _value } = event.target;\n    setInputValue(_value);\n\n    const filteredSuggestions = data.filter((item) =>\n      item.name.toLowerCase().includes(_value.toLowerCase())\n    );\n\n    setFilteredData(filteredSuggestions);\n    toggleIsShowSuggestions(true);\n  };\n\n  const onSelectSuggestion = (index: number) => {\n    onChange(filteredData[index]);\n    setInputValue(filteredData[index].name);\n    toggleIsShowSuggestions(false);\n  };\n\n  return (\n    <div className=\"suggestions\">\n      <Input\n        name={name}\n        placeholder=\"Name Surname\"\n        value={inputValue}\n        onChange={onChangeHandle}\n        onFocus={onFocus}\n      />\n      {isShowSuggestions && (\n        <ul className=\"suggestions_list\" ref={listRef}>\n          {filteredData.map((elem, index) => (\n            <li\n              key={elem.id}\n              className={clsx(\"suggestions_list__elem\")}\n              onClick={() => onSelectSuggestion(index)}\n            >\n              {elem.name}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default Autocomplete;\n","import * as Yup from \"yup\";\n\nconst MAX_LENGTH = 10;\nconst MAX_ERROR_MESSAGE = `Should be less that ${MAX_LENGTH} symbols`;\nexport const RewardSchema = Yup.object().shape({\n  user: Yup.object().shape({ name: Yup.string() }).required(\"User is required\").nullable(),\n  reward: Yup.string().max(MAX_LENGTH, MAX_ERROR_MESSAGE).required(\"Reward is required\"),\n});\n","import * as React from \"react\";\nimport { Formik, FormikProps, ErrorMessage } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Modal from \"../../components/Modal\";\nimport Autocomplete from \"../../components/Autocomplete\";\nimport Input from \"../../components/Input\";\n\nimport { RewardSchema } from \"./validation\";\nimport { getUsersDataSelector } from \"../../store/users/selectors\";\nimport { createRewards } from \"../../store/rewards/reducers\";\nimport { CreateRewardEntity } from \"../../interfaces/RewardEntity\";\nimport { UserEntity } from \"../../interfaces/UserEntity\";\n\nimport \"./RewardModal.scss\";\n\ninterface RewardModalProps {\n  open: boolean;\n  handleCloseModal(): void;\n}\n\nexport const initialReward: CreateRewardEntity = {\n  user: null,\n  reward: \"\",\n  message: \"\",\n};\n\nconst RewardModal: React.FC<RewardModalProps> = ({ open, handleCloseModal }) => {\n  const dispatch = useDispatch();\n\n  const users = useSelector(getUsersDataSelector);\n\n  const onSubmit = (values: CreateRewardEntity) => {\n    dispatch(createRewards(values));\n    handleCloseModal();\n  };\n\n  return (\n    <Modal isOpen={open} onClose={handleCloseModal}>\n      <Formik\n        initialValues={initialReward}\n        validationSchema={RewardSchema}\n        onSubmit={(values) => onSubmit(values)}\n      >\n        {({\n          values,\n          setFieldValue,\n          handleChange,\n          handleSubmit,\n        }: FormikProps<CreateRewardEntity>) => (\n          <form onSubmit={handleSubmit} className=\"modal_form\">\n            <div className=\"modal_field\">\n              <span className=\"modal_field__label\">To</span>\n              <Autocomplete<UserEntity>\n                name=\"user\"\n                data={users}\n                value={values.user}\n                onChange={(value) => setFieldValue(\"user\", value)}\n              />\n              <ErrorMessage name=\"user\" component=\"span\" className=\"modal_field__error\" />\n            </div>\n            <div className=\"modal_field\">\n              <span className=\"modal_field__label\">Reward</span>\n              <Input\n                name=\"reward\"\n                type=\"number\"\n                value={values.reward}\n                placeholder=\"$\"\n                onChange={handleChange}\n              />\n              <ErrorMessage name=\"reward\" component=\"span\" className=\"modal_field__error\" />\n            </div>\n            <div className=\"modal_field\">\n              <span className=\"modal_field__label\">Why?</span>\n              <textarea\n                name=\"message\"\n                rows={4}\n                value={values.message}\n                className=\"input\"\n                onChange={handleChange}\n              />\n            </div>\n            <button type=\"submit\" className=\"modal__btn\">\n              Reward\n            </button>\n          </form>\n        )}\n      </Formik>\n    </Modal>\n  );\n};\n\nexport default RewardModal;\n","import * as React from \"react\";\n\nimport \"./Preloader.scss\";\n\nconst Preloader = () => (\n  <div className=\"loading\">\n    <div />\n    <div />\n  </div>\n);\n\nexport default Preloader;\n","import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport useToggleModal from \"./hooks/useToggleModal\";\nimport Feed from \"./containers/Feed\";\nimport Header from \"./containers/Header\";\nimport RewardModal from \"./containers/RewardModal\";\nimport Preloader from \"./components/Preloader\";\n\nimport { getRewardsLoadingSelector } from \"./store/rewards/selectors\";\nimport { getUsers } from \"./store/users/reducers\";\n\nimport \"./styles.scss\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    dispatch(getUsers());\n  }, [dispatch]);\n\n  const { open, handleOpenModal, handleCloseModal } = useToggleModal();\n  const isLoading = useSelector(getRewardsLoadingSelector);\n\n  return (\n    <>\n      {!isLoading ? (\n        <div className=\"main\">\n          <Header />\n          <Feed handleOpenModal={handleOpenModal} />\n          <RewardModal open={open} handleCloseModal={handleCloseModal} />\n        </div>\n      ) : (\n        <Preloader />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\n\nimport App from \"./App\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}